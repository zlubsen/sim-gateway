#mode = "Interactive"
mode = "Headless"

[metadata]
name = "Sample Routes"
author = "Zeeger"
version = "0.1"

# normal notation
#[[routes]]
#name = "tcp-udp-normal"
#buffer_size = 32768
#flow_mode = "bidirectional"
#enabled = true
#[routes.in_point]
#uri = "tcp://192.168.8.158:3001"
#kind = "Server"
#[routes.out_point]
#uri = "udp://192.168.8.255:3000"
#kind = "Broadcast"

## Each route is specified by an entry in the 'routes' table
# [[routes]]
## Name to identify the route. Mandatory.
#name = "first"
## A route consists of an 'in_point' and an 'out_point' through which data flows. Both are mandatory.
## Points have a mandatory 'uri' and 'interface' fields, and optional 'kind' and 'ttl' fields.
## A URI is of the form "scheme:://host:port"
## - scheme: udp or tcp
## - host: a valid IP address (can be broadcast or multicast addresses)
## - port: the port to use in the connection
## The 'interface' field contains the local interface address the endpoint is bound to.
## 'kind' indicates the type of connection/socket.
## - Valid values for UDP sockets: 'Unicast', 'Broadcast', 'Multicast'
## - Valid values for TCP sockets: 'Server', 'Client'
## 'ttl' sets the Time-To-Live value (u32) for the packets send throught the sockets. Defaults to 64, or 1 for broadcast UDP sockets.
#in_point = { uri = "udp://192.168.8.158:3001", interface = "192.168.8.158" }
#out_point = { uri = "udp://192.168.8.255:3000", interface = "192.168.8.158", kind = "Broadcast" }
## Size of the buffer in bytes (usize) for this route; Optional, defaults to 32768 bytes.
#buffer_size = 32768
## 'max_connections' sets the maximum number of allowed connections for a TCP server socket. Defaults to 10.
# max_connections = 10
## Flow mode sets whether data flows through the route one-way or two-way. Optional, defaults to 'unidirectional'
## - Valid values: 'unidirectional', 'bidirectional'
#flow_mode = "bidirectional"
## The 'block_host' option (bool) prevents routes from reading messages send by the own host IP.
## This prevents routes from reading and sending its own messages endlessly.
## Optional, defaults to 'true'.
# block_host = true
## The 'enabled' option (bool) allows turning the route on or off.
## 'Off' means the route is not created. Optional, defaults to 'true'.
#enabled = false

# inline table notation
[[routes]]
name = "udp-tcp(server)"
in_point = { uri = "udp://192.168.8.158:3005", interface = "192.168.8.158", kind = "Unicast" }
out_point = { uri = "tcp://192.168.8.158:3006", interface = "192.168.8.158" }
buffer_size = 32768
flow_mode = "unidirectional"
enabled = false

[[routes]]
name = "udp-tcp(server)-2way"
in_point = { uri = "udp://192.168.8.158:3005", interface = "192.168.8.158", kind = "Unicast" }
out_point = { uri = "tcp://192.168.8.158:3006", interface = "192.168.8.158" }
buffer_size = 32768
flow_mode = "bidirectional"
enabled = false

[[routes]]
name = "tcp(server)-udp"
in_point = { uri = "tcp://192.168.8.158:3006", interface = "192.168.8.158" }
out_point = { uri = "udp://192.168.8.158:3005", interface = "192.168.8.158", kind = "Unicast" }
buffer_size = 32768
flow_mode = "unidirectional"
enabled = false

[[routes]]
name = "udp-udp"
in_point = { uri = "udp://192.168.8.158:3001", interface = "192.168.8.158"}
out_point = { uri = "udp://192.168.8.255:3000", interface = "192.168.8.158", kind = "Broadcast" }
flow_mode = "unidirectional"
block_host = false
enabled = false

[[routes]]
name = "udp-udp-bc-2way"
in_point = { uri = "udp://192.168.8.158:3001", interface = "192.168.8.158"}
out_point = { uri = "udp://192.168.8.255:3000", interface = "192.168.8.158", kind = "Broadcast" }
flow_mode = "bidirectional"
block_host = false
enabled = false

[[routes]]
name = "tcp(server)-tcp(server)"
in_point = { uri = "tcp://192.168.8.158:3008", interface = "192.168.8.158"}
out_point = { uri = "tcp://192.168.8.255:3009", interface = "192.168.8.158"}
flow_mode = "unidirectional"
block_host = false
enabled = false

[[routes]]
name = "tcp(server)-tcp(server)-2way"
in_point = { uri = "tcp://192.168.8.158:3008", interface = "192.168.8.158"}
out_point = { uri = "tcp://192.168.8.158:3009", interface = "192.168.8.158"}
flow_mode = "bidirectional"
block_host = false
enabled = false

[[routes]]
name = "udp-tcp(client)"
in_point = { uri = "udp://192.168.8.158:3005", interface = "192.168.8.158", kind = "Unicast" }
out_point = { uri = "tcp://192.168.8.158:3006", interface = "192.168.8.158", kind = "Client" }
buffer_size = 32768
flow_mode = "unidirectional"
enabled = false

[[routes]]
name = "tcp(client)-udp"
in_point = { uri = "tcp://192.168.8.158:3006", interface = "192.168.8.158", kind = "Client" }
out_point = { uri = "udp://192.168.8.158:3005", interface = "192.168.8.158", kind = "Unicast" }
buffer_size = 32768
flow_mode = "unidirectional"
enabled = false

[[routes]]
name = "tcp(client)-tcp(client)-2way"
in_point = { uri = "tcp://192.168.8.158:3008", interface = "192.168.8.158", kind = "Client" }
out_point = { uri = "tcp://192.168.8.158:3009", interface = "192.168.8.158", kind = "Client" }
flow_mode = "bidirectional"
block_host = false
enabled = false

[[routes]]
name = "udp-tcp(server)-filter-passall"
in_point = { uri = "udp://192.168.8.158:3003", interface = "192.168.8.158", kind = "Unicast" }
out_point = { uri = "tcp://192.168.8.158:3004", interface = "192.168.8.158", kind = "Server" }
buffer_size = 32768
flow_mode = "unidirectional"
filters = ["PassAll"]
enabled = false

[[routes]]
name = "udp-tcp(server)-filter-blockall"
in_point = { uri = "udp://192.168.8.158:3005", interface = "192.168.8.158", kind = "Unicast" }
out_point = { uri = "tcp://192.168.8.158:3006", interface = "192.168.8.158", kind = "Server" }
buffer_size = 32768
flow_mode = "unidirectional"
filters = ["BlockAll"]
enabled = false

[[routes]]
name = "udp-tcp(server)-transform-capitalize"
in_point = { uri = "udp://192.168.8.158:3003", interface = "192.168.8.158", kind = "Unicast" }
out_point = { uri = "tcp://192.168.8.158:3004", interface = "192.168.8.158", kind = "Server" }
buffer_size = 32768
flow_mode = "unidirectional"
#filters = ["PassAll"]
transformers = ["CapitalizeUTF8"]
enabled = false

[[routes]]
name = "udp-udp-transform-capitalize"
in_point = { uri = "udp://192.168.8.158:3001", interface = "192.168.8.158"}
out_point = { uri = "udp://192.168.8.255:3000", interface = "192.168.8.158", kind = "Broadcast" }
buffer_size = 32768
flow_mode = "unidirectional"
#filters = ["PassAll"]
transformers = ["CapitalizeUTF8"]
enabled = true

[[hubs]]
name = "basic-hub"
buffer_size = 32768
connections = [
    { uri = "tcp://192.168.8.158:3101", interface = "192.168.8.158", kind = "Server" },
    { uri = "tcp://192.168.8.158:3102", interface = "192.168.8.158", kind = "Server" }
    { uri = "tcp://192.168.8.158:3103", interface = "192.168.8.158", kind = "Server" }
]
#filters = ["PassAll"]
#transformers = ["CapitalizeUTF8"]
enabled = false

# Issues
# Udp(uni)-tcp(server), bidirectional, udp stuurt uit op lo ipv geconfigureerde interface - nog algemeen issue welke interface gepakt wordt

# TODO retry connect loop in create_tcp_client_socket, for when the configured server socket is not yet up
# TODO switch to tokio::join! to await the handles?
# TODO replace trace! lines in runtime.rs with event_tx.send(error);
# TODO remove .expect() calls (a.o. after socket.accept() call). Use if let Ok()...